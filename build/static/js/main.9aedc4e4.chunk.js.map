{"version":3,"sources":["components/test-end/index.tsx","common/services/count-answer.ts","components/test-button/index.tsx","components/test-question/index.tsx","components/test/index.tsx","containers/App.tsx","serviceWorker.js","index.js"],"names":["TestEnd","this","props","resetClickHandler","finalAnswers","nationalities","max","Object","keys","forEach","key","push","findFinalAnswer","output","length","last","pop","join","react_default","a","createElement","className","index_es","variant","color","href","onClick","handleResetClick","bind","Component","QuestionButton","clickHandler","button_text","selectAnswer","answer","Button_default","handleClick","TestQuestion","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","showNextQuestionHandler","_this","test_question","instruction_text","answer_options","map","answer_option","index","components_test_button","testData","require","Test","dataToUpdate","test_questions","state","test_position","update","countAnswers","setState","isTestEnd","components_test_end","components_test_question","showNextQuestion","App","test_Test","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9aedc4e4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./index.scss\";\nimport { findFinalAnswer } from \"../../common/services/count-answer\";\nimport { Button } from \"@material-ui/core\";\n\nclass TestEnd extends Component<any, any> {\n  handleResetClick() {\n    this.props.resetClickHandler();\n  }\n\n  showResult() {}\n\n  render() {\n    const finalAnswers = findFinalAnswer(this.props.nationalities);\n\n    let output = \"\";\n\n    if (finalAnswers.length > 1) {\n      const last = finalAnswers.pop();\n      output += finalAnswers.join(\", \") + \" or \" + last;\n    } else {\n      output += finalAnswers[0];\n    }\n\n    return (\n      <div>\n        <div className=\"text\">You are most probably:</div>\n        <div className=\"output\">{output}</div>\n\n        <Button\n          variant=\"contained\"\n          color=\"default\"\n          href=\"#\"\n          onClick={this.handleResetClick.bind(this)}\n        >\n          Reset The Test{\" \"}\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default TestEnd;\n","export function countAnswers(nationalities: any, dataToUpdate: string[]) {\n  dataToUpdate.forEach(key => nationalities[key]++);\n  return nationalities;\n}\n\nexport function findFinalAnswer(nationalities: any) {\n  let max = 0;\n  let finalAnswers: string[] = [];\n\n  Object.keys(nationalities).forEach(key => {\n    if (nationalities[key] > max) {\n      max = nationalities[key];\n    }\n  });\n\n  Object.keys(nationalities).forEach(key => {\n    if (nationalities[key] === max) {\n      finalAnswers.push(key);\n    }\n  });\n\n  return finalAnswers;\n}\n","import React, { Component } from \"react\";\nimport \"./index.scss\";\nimport Button from \"@material-ui/core/Button\";\n\nclass QuestionButton extends Component<any, any> {\n  handleClick() {\n    this.props.clickHandler(this.props.button_text);\n    this.props.selectAnswer(this.props.answer);\n  }\n\n  render() {\n    return (\n      <div>\n        {\" \"}\n        <div className=\"button\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={this.handleClick.bind(this)}\n          >\n            {this.props.button_text}{\" \"}\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default QuestionButton;\n","import React, { Component } from \"react\";\nimport \"./index.scss\";\nimport TestButton from \"../test-button\";\n\nclass TestQuestion extends Component<any, any> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  handleClick() {\n    this.props.showNextQuestionHandler();\n  }\n\n  render() {\n    return (\n      <div className=\"buttons-root\">\n        <div className=\"question\">\n          {this.props.test_question.instruction_text}\n        </div>\n        <div className=\"buttons\">\n          {this.props.test_question.answer_options.map(\n            (answer_option: any, index: string | number | undefined) => {\n              return (\n                <TestButton\n                  key={index}\n                  button_text={answer_option.answer}\n                  clickHandler={this.handleClick.bind(this)}\n                  answer={index}\n                  selectAnswer={this.props.selectAnswer}\n                />\n              );\n            }\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TestQuestion;\n","import React, { Component } from \"react\";\nimport TestEnd from \"../test-end\";\nimport TestQuestion from \"../test-question\";\nimport \"./index.scss\";\nimport { countAnswers } from \"../../common/services/count-answer\";\n\nlet testData = require(\"../../common/data/test_data.json\");\n\nexport default class Test extends Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = { test_position: 1 };\n  }\n\n  showNextQuestion() {\n    this.setState((state: { test_position: number }) => {\n      return { test_position: state.test_position + 1 };\n    });\n  }\n\n  handleResetClick() {\n    this.setState({ test_position: 1 });\n  }\n\n  selectAnswer = (answer: any) => {\n    const dataToUpdate =\n      testData.test_questions[this.state.test_position - 1].answer_options[\n        answer\n      ].update;\n\n    countAnswers(testData.nationalities, dataToUpdate);\n  };\n\n  render() {\n    const isTestEnd =\n      this.state.test_position - 1 === testData.test_questions.length;\n\n    return (\n      <div>\n        {isTestEnd ? (\n          <TestEnd\n            resetClickHandler={this.handleResetClick.bind(this)}\n            nationalities={testData.nationalities}\n          />\n        ) : (\n          <TestQuestion\n            test_question={\n              testData.test_questions[this.state.test_position - 1]\n            }\n            showNextQuestionHandler={this.showNextQuestion.bind(this)}\n            selectAnswer={this.selectAnswer}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Test from \"./../components/test/index\";\nimport \"./index.scss\";\n\nclass App extends Component<any, any> {\n  render() {\n    return (\n      <div>\n        <Test />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}